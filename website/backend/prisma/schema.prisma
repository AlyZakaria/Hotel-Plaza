// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("SQL_DATABASE_URL")
}



model Customer {
  id      Int    @id @default(autoincrement())
  email     String?
  password  String?
  fname     String
  lname     String
  phone     String  @unique
  country   String
  address   String
  zip       String
  reservation    Reservation[]
  otp otp?
  @@map("customers")
}


model Reservation {
  id          Int        @id @default(autoincrement())
  customerId  Int
  date        DateTime   @default(now())
  checkin     DateTime
  checkout    DateTime
  bill        Bill?
  rooms       Booking[]

  customer    Customer  @relation(fields: [customerId], references: [id])
  @@map("reservations")



}
enum StatusBill {
  incomplete
  complete
}

model Bill {
  number        Int         @id @default(autoincrement())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @unique
  totalAmount   Decimal
  time          DateTime    @default(now())
  status        StatusBill
}

enum StatusBooking {
  reserved
  cancelled
  checked_in
  checked_out
}

model Booking {
  reservation    Reservation   @relation(fields: [reservationId], references: [id])
  reservationId  Int
  room           Room          @relation(fields: [roomId], references: [id])
  roomId         Int
  receptionistId Int?
  status         StatusBooking

  @@unique([reservationId, roomId])
}

enum View {
  garden
  pool
  sea
}

model Room {
  id           Int       @id @default(autoincrement())
  roomType     RoomType  @relation(fields: [typeId], references: [id])
  typeId       Int
  reservations Booking[]
}

model RoomType {
  id            Int         @id @default(autoincrement())
  count         Int
  pricepernight Decimal
  capacity      Int
  view          View
  name          String      @db.VarChar(6)
  description   String?
  room          Room[]
  imageURLs     TypeImage[]
  offer         Offer[]
 
}

model ImageURL {
  id        Int         @id @default(autoincrement())
  blob      Bytes
  type      String?
  roomTypes TypeImage[] 

}

model TypeImage {
  roomType RoomType @relation(fields: [typeId], references: [id] , onDelete: Cascade)
  typeId   Int

  imageURL ImageURL @relation(fields: [imageId], references: [id])
  imageId  Int

  @@unique([typeId, imageId])
}

model Offer {
  id         Int      @id @default(autoincrement())
  roomType   RoomType @relation(fields: [typeId], references: [id])
  typeId     Int
  startDate  DateTime
  endDate    DateTime
  percentage Decimal
  status offer_status
}
enum offer_status{
  active
  inactive
}

model otp {
  id Int @id @default(autoincrement())
  otp String? 
  createdAt  DateTime @default(now()) @map("created_at")
  customer Customer @relation(fields: [userId], references: [id])
  userId   Int @unique
  @@unique([otp,userId])
}


model newsLetter {
  email String @id 
  name String

}