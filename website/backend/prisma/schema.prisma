// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("SQL_DATABASE_URL")
}

model Customer {
  id          Int           @id @default(autoincrement())
  email       String?
  password    String?
  fname       String
  lname       String
  phone       String        @unique
  gender      gender
  dob         DateTime?
  address     String?
  provenance  String?
  country     String?
  image       Bytes?
  imageType   String?
  reservation Reservation[]
  reviews     Review[]
  otp         otp?

  @@map("customers")
}

enum gender {
  male
  female
}

model Reservation {
  id         Int       @id @default(autoincrement())
  customerId Int
  date       DateTime  @default(now())
  checkin    DateTime
  checkout   DateTime
  bill       Bill?
  rooms      Booking[]

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("reservations")
}

enum StatusBill {
  incomplete
  complete
}

model Bill {
  number        Int         @id @default(autoincrement())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @unique
  totalAmount   Decimal
  time          DateTime    @default(now())
  saleId        String
  status        StatusBill
}

enum StatusBooking {
  reserved
  cancelled
  checked_in
  checked_out
}

model Booking {
  reservation    Reservation   @relation(fields: [reservationId], references: [id])
  reservationId  Int
  room           Room          @relation(fields: [roomId], references: [room_id])
  roomId         Int
  receptionistId Int?
  status         StatusBooking

  @@unique([reservationId, roomId])
}

enum View {
  garden
  pool
  sea
}

model Room {
  room_id      Int       @id @default(autoincrement())
  roomType     RoomType  @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId       Int
  reservations Booking[]
}

model RoomType {
  id            Int         @id @default(autoincrement())
  count         Int
  pricepernight Decimal
  capacity      Int
  view          View
  name          String
  bed           bed_types
  size          Decimal
  description   String? @db.VarChar(1000)
  room          Room[]
  imageURLs     TypeImage[]
  offer         Offer[]
  reviews       Review[] // Add the opposite relation field

  @@unique([name, view, capacity])
}

model Review {
  id         Int      @id @default(autoincrement())
  roomTypeId Int
  customerId Int
  rating     Decimal
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roomType RoomType @relation(fields: [roomTypeId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
}

enum bed_types {
  single
  double
  king
  queen
}

model ImageURL {
  id        Int         @id @default(autoincrement())
  blob      Bytes
  type      String?
  roomTypes TypeImage[]
}

model TypeImage {
  roomType RoomType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId   Int

  imageURL ImageURL @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  Int

  @@unique([typeId, imageId])
}

model Offer {
  id         Int          @id @default(autoincrement())
  roomType   RoomType     @relation(fields: [typeId], references: [id])
  typeId     Int
  startDate  DateTime
  endDate    DateTime
  percentage Decimal
  name       String
  status     offer_status
}

enum offer_status {
  active
  inactive
}

model otp {
  id        Int      @id @default(autoincrement())
  otp       String?
  createdAt DateTime @default(now()) @map("created_at")
  customer  Customer @relation(fields: [userId], references: [id])
  userId    Int      @unique

  @@unique([otp, userId])
}

model newsLetter {
  email String @id
  name  String
}
