generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("SQL_DATABASE_URL")
}

model Customer {
  id          Int           @id @default(autoincrement())
  email       String?
  password    String?
  fname       String
  lname       String
  phone       String        @unique
  country     String
  address     String
  zip         String
  reservation Reservation[]

  @@map("customers")
}

model Reservation {
  id         Int       @id @default(autoincrement())
  customerId Int
  date       DateTime  @default(now())
  checkin    DateTime
  checkout   DateTime
  bill       bill?
  booking    booking[]
  customer   Customer  @relation(fields: [customerId], references: [id])

  @@index([customerId], map: "reservations_customerId_fkey")
  @@map("reservations")
}

model bill {
  number        Int         @id @default(autoincrement())
  reservationId Int         @unique(map: "Bill_reservationId_key")
  totalAmount   Decimal
  time          DateTime    @default(now())
  status        bill_status
  reservations  Reservation @relation(fields: [reservationId], references: [id], map: "Bill_reservationId_fkey")
}

model booking {
  reservationId  Int
  roomId         Int
  receptionistId Int?
  status         booking_status
  reservations   Reservation    @relation(fields: [reservationId], references: [id], map: "Booking_reservationId_fkey")
  room           room           @relation(fields: [roomId], references: [id], map: "Booking_roomId_fkey")

  @@unique([reservationId, roomId], map: "Booking_reservationId_roomId_key")
  @@index([roomId], map: "Booking_roomId_fkey")
}

model imageurl {
  id        Int         @id @default(autoincrement())
  blob      Bytes
  type      String?
  typeimage typeimage[]
}

model offer {
  id         Int      @id @default(autoincrement())
  typeId     Int
  startDate  DateTime
  endDate    DateTime
  percentage Decimal
  roomtype   roomtype @relation(fields: [typeId], references: [id], map: "Offer_typeId_fkey")

  @@index([typeId], map: "Offer_typeId_fkey")
}

model room {
  id       Int       @id @default(autoincrement())
  typeId   Int
  booking  booking[]
  roomtype roomtype  @relation(fields: [typeId], references: [id], map: "Room_typeId_fkey")

  @@index([typeId], map: "Room_typeId_fkey")
}

model roomtype {
  id            Int           @id @default(autoincrement())
  count         Int
  pricepernight Decimal
  capacity      Int
  view          roomtype_view
  name          String        @db.VarChar(6)
  description   String?
  offer         offer[]
  room          room[]
  typeimage     typeimage[]

  @@unique([capacity, name, pricepernight], map: "RoomType_capacity_name_pricepernight_key")
}

model typeimage {
  typeId   Int 
  imageId  Int
  imageurl imageurl @relation(fields: [imageId], references: [id], map: "TypeImage_imageId_fkey", onDelete: Cascade)
  roomtype roomtype @relation(fields: [typeId], references: [id], map: "TypeImage_typeId_fkey" , onDelete: Cascade)

  @@unique([typeId, imageId], map: "TypeImage_typeId_imageId_key")
  @@index([imageId], map: "TypeImage_imageId_fkey")
}

enum booking_status {
  reserved
  cancelled
  checked_in
  checked_out
}

enum bill_status {
  incomplete
  complete
}

enum roomtype_view {
  garden
  pool
  sea
}
